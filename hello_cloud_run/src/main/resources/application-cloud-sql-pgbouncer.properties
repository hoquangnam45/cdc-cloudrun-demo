# Cloud SQL Connector Configuration with PgBouncer (Enterprise Plus)
# Cloud SQL Connector provides Google-managed connection pooling (NOT PgBouncer)
# PgBouncer is enabled at the database level via connection_pool_config
# This profile connects to the pooled Enterprise Plus instance
spring.cloud.gcp.sql.enabled=true
spring.cloud.gcp.sql.database-name=${DB_NAME}
spring.cloud.gcp.sql.instance-connection-name=${INSTANCE_CONNECTION_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}

# Private IP and no IAM auth
spring.cloud.gcp.sql.ip-types=PRIVATE
spring.cloud.gcp.sql.enable-iam-auth=false

# HikariCP Pool Settings (same as direct for fair comparison)
# PgBouncer handles connection multiplexing at database level
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=0
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Note: Cloud SQL Connector automatically discovers PgBouncer when enabled
# No need to manually specify port - it handles it internally
